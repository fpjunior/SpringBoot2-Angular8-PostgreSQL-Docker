import { AfterViewInit, EventEmitter, NgZone, OnDestroy, ElementRef, ChangeDetectorRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare class Captcha implements AfterViewInit, OnDestroy {
    el: ElementRef;
    _zone: NgZone;
    cd: ChangeDetectorRef;
    siteKey: string;
    theme: string;
    type: string;
    size: string;
    tabindex: number;
    language: string;
    initCallback: string;
    onResponse: EventEmitter<any>;
    onExpire: EventEmitter<any>;
    private _instance;
    constructor(el: ElementRef, _zone: NgZone, cd: ChangeDetectorRef);
    ngAfterViewInit(): void;
    init(): void;
    reset(): void;
    getResponse(): String;
    recaptchaCallback(response: string): void;
    recaptchaExpiredCallback(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Captcha>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Captcha, "p-captcha", never, {
    "siteKey": "siteKey";
    "theme": "theme";
    "type": "type";
    "size": "size";
    "tabindex": "tabindex";
    "language": "language";
    "initCallback": "initCallback";
}, {
    "onResponse": "onResponse";
    "onExpire": "onExpire";
}, never>;
}
export declare class CaptchaModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<CaptchaModule, [typeof Captcha], [typeof ɵngcc1.CommonModule], [typeof Captcha]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<CaptchaModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FwdGNoYS5kLnRzIiwic291cmNlcyI6WyJjYXB0Y2hhLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQTs7OztBQUVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUsIE9uRGVzdHJveSwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhcHRjaGEgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIGVsOiBFbGVtZW50UmVmO1xuICAgIF96b25lOiBOZ1pvbmU7XG4gICAgY2Q6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIHNpdGVLZXk6IHN0cmluZztcbiAgICB0aGVtZTogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBzaXplOiBzdHJpbmc7XG4gICAgdGFiaW5kZXg6IG51bWJlcjtcbiAgICBsYW5ndWFnZTogc3RyaW5nO1xuICAgIGluaXRDYWxsYmFjazogc3RyaW5nO1xuICAgIG9uUmVzcG9uc2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRXhwaXJlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwcml2YXRlIF9pbnN0YW5jZTtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgX3pvbmU6IE5nWm9uZSwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBpbml0KCk6IHZvaWQ7XG4gICAgcmVzZXQoKTogdm9pZDtcbiAgICBnZXRSZXNwb25zZSgpOiBTdHJpbmc7XG4gICAgcmVjYXB0Y2hhQ2FsbGJhY2socmVzcG9uc2U6IHN0cmluZyk6IHZvaWQ7XG4gICAgcmVjYXB0Y2hhRXhwaXJlZENhbGxiYWNrKCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhcHRjaGFNb2R1bGUge1xufVxuIl19
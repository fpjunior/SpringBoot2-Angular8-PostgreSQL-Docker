import { ElementRef, AfterViewChecked, OnDestroy, Renderer2, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { MenuItem } from 'primeng/api';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/router';
export declare class SlideMenuSub implements OnDestroy {
    item: MenuItem;
    root: boolean;
    backLabel: string;
    menuWidth: number;
    effectDuration: any;
    easing: string;
    index: number;
    slideMenu: SlideMenu;
    constructor(slideMenu: any);
    activeItem: any;
    itemClick(event: any, item: MenuItem, listitem: any): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SlideMenuSub>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SlideMenuSub, "p-slideMenuSub", never, {
    "backLabel": "backLabel";
    "easing": "easing";
    "item": "item";
    "root": "root";
    "menuWidth": "menuWidth";
    "effectDuration": "effectDuration";
    "index": "index";
}, {}, never>;
}
export declare class SlideMenu implements AfterViewChecked, OnDestroy {
    el: ElementRef;
    renderer: Renderer2;
    cd: ChangeDetectorRef;
    model: MenuItem[];
    popup: boolean;
    style: any;
    styleClass: string;
    menuWidth: number;
    viewportHeight: number;
    effectDuration: any;
    easing: string;
    backLabel: string;
    appendTo: any;
    autoZIndex: boolean;
    baseZIndex: number;
    showTransitionOptions: string;
    hideTransitionOptions: string;
    onShow: EventEmitter<any>;
    onHide: EventEmitter<any>;
    containerViewChild: ElementRef;
    backwardViewChild: ElementRef;
    slideMenuContentViewChild: ElementRef;
    documentClickListener: any;
    documentResizeListener: any;
    preventDocumentDefault: boolean;
    scrollHandler: any;
    left: number;
    animating: boolean;
    target: any;
    visible: boolean;
    viewportUpdated: boolean;
    constructor(el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef);
    ngAfterViewChecked(): void;
    set container(element: ElementRef);
    set backward(element: ElementRef);
    set slideMenuContent(element: ElementRef);
    updateViewPort(): void;
    toggle(event: any): void;
    show(event: any): void;
    onOverlayAnimationStart(event: AnimationEvent): void;
    appendOverlay(): void;
    restoreOverlayAppend(): void;
    moveOnTop(): void;
    hide(): void;
    onWindowResize(): void;
    onClick(event: any): void;
    goBack(): void;
    bindDocumentClickListener(): void;
    unbindDocumentClickListener(): void;
    bindDocumentResizeListener(): void;
    unbindDocumentResizeListener(): void;
    bindScrollListener(): void;
    unbindScrollListener(): void;
    onOverlayHide(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SlideMenu>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SlideMenu, "p-slideMenu", never, {
    "menuWidth": "menuWidth";
    "viewportHeight": "viewportHeight";
    "effectDuration": "effectDuration";
    "easing": "easing";
    "backLabel": "backLabel";
    "autoZIndex": "autoZIndex";
    "baseZIndex": "baseZIndex";
    "showTransitionOptions": "showTransitionOptions";
    "hideTransitionOptions": "hideTransitionOptions";
    "model": "model";
    "popup": "popup";
    "style": "style";
    "styleClass": "styleClass";
    "appendTo": "appendTo";
}, {
    "onShow": "onShow";
    "onHide": "onHide";
}, never>;
}
export declare class SlideMenuModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<SlideMenuModule, [typeof SlideMenu, typeof SlideMenuSub], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.RouterModule], [typeof SlideMenu, typeof ɵngcc2.RouterModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<SlideMenuModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVtZW51LmQudHMiLCJzb3VyY2VzIjpbInNsaWRlbWVudS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFhQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5REE7Ozs7QUFFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSwgUmVuZGVyZXIyLCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbmltYXRpb25FdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgTWVudUl0ZW0gfSBmcm9tICdwcmltZW5nL2FwaSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTbGlkZU1lbnVTdWIgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIGl0ZW06IE1lbnVJdGVtO1xuICAgIHJvb3Q6IGJvb2xlYW47XG4gICAgYmFja0xhYmVsOiBzdHJpbmc7XG4gICAgbWVudVdpZHRoOiBudW1iZXI7XG4gICAgZWZmZWN0RHVyYXRpb246IGFueTtcbiAgICBlYXNpbmc6IHN0cmluZztcbiAgICBpbmRleDogbnVtYmVyO1xuICAgIHNsaWRlTWVudTogU2xpZGVNZW51O1xuICAgIGNvbnN0cnVjdG9yKHNsaWRlTWVudTogYW55KTtcbiAgICBhY3RpdmVJdGVtOiBhbnk7XG4gICAgaXRlbUNsaWNrKGV2ZW50OiBhbnksIGl0ZW06IE1lbnVJdGVtLCBsaXN0aXRlbTogYW55KTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2xpZGVNZW51IGltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCwgT25EZXN0cm95IHtcbiAgICBlbDogRWxlbWVudFJlZjtcbiAgICByZW5kZXJlcjogUmVuZGVyZXIyO1xuICAgIGNkOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBtb2RlbDogTWVudUl0ZW1bXTtcbiAgICBwb3B1cDogYm9vbGVhbjtcbiAgICBzdHlsZTogYW55O1xuICAgIHN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBtZW51V2lkdGg6IG51bWJlcjtcbiAgICB2aWV3cG9ydEhlaWdodDogbnVtYmVyO1xuICAgIGVmZmVjdER1cmF0aW9uOiBhbnk7XG4gICAgZWFzaW5nOiBzdHJpbmc7XG4gICAgYmFja0xhYmVsOiBzdHJpbmc7XG4gICAgYXBwZW5kVG86IGFueTtcbiAgICBhdXRvWkluZGV4OiBib29sZWFuO1xuICAgIGJhc2VaSW5kZXg6IG51bWJlcjtcbiAgICBzaG93VHJhbnNpdGlvbk9wdGlvbnM6IHN0cmluZztcbiAgICBoaWRlVHJhbnNpdGlvbk9wdGlvbnM6IHN0cmluZztcbiAgICBvblNob3c6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uSGlkZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY29udGFpbmVyVmlld0NoaWxkOiBFbGVtZW50UmVmO1xuICAgIGJhY2t3YXJkVmlld0NoaWxkOiBFbGVtZW50UmVmO1xuICAgIHNsaWRlTWVudUNvbnRlbnRWaWV3Q2hpbGQ6IEVsZW1lbnRSZWY7XG4gICAgZG9jdW1lbnRDbGlja0xpc3RlbmVyOiBhbnk7XG4gICAgZG9jdW1lbnRSZXNpemVMaXN0ZW5lcjogYW55O1xuICAgIHByZXZlbnREb2N1bWVudERlZmF1bHQ6IGJvb2xlYW47XG4gICAgc2Nyb2xsSGFuZGxlcjogYW55O1xuICAgIGxlZnQ6IG51bWJlcjtcbiAgICBhbmltYXRpbmc6IGJvb2xlYW47XG4gICAgdGFyZ2V0OiBhbnk7XG4gICAgdmlzaWJsZTogYm9vbGVhbjtcbiAgICB2aWV3cG9ydFVwZGF0ZWQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQ7XG4gICAgc2V0IGNvbnRhaW5lcihlbGVtZW50OiBFbGVtZW50UmVmKTtcbiAgICBzZXQgYmFja3dhcmQoZWxlbWVudDogRWxlbWVudFJlZik7XG4gICAgc2V0IHNsaWRlTWVudUNvbnRlbnQoZWxlbWVudDogRWxlbWVudFJlZik7XG4gICAgdXBkYXRlVmlld1BvcnQoKTogdm9pZDtcbiAgICB0b2dnbGUoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgc2hvdyhldmVudDogYW55KTogdm9pZDtcbiAgICBvbk92ZXJsYXlBbmltYXRpb25TdGFydChldmVudDogQW5pbWF0aW9uRXZlbnQpOiB2b2lkO1xuICAgIGFwcGVuZE92ZXJsYXkoKTogdm9pZDtcbiAgICByZXN0b3JlT3ZlcmxheUFwcGVuZCgpOiB2b2lkO1xuICAgIG1vdmVPblRvcCgpOiB2b2lkO1xuICAgIGhpZGUoKTogdm9pZDtcbiAgICBvbldpbmRvd1Jlc2l6ZSgpOiB2b2lkO1xuICAgIG9uQ2xpY2soZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgZ29CYWNrKCk6IHZvaWQ7XG4gICAgYmluZERvY3VtZW50Q2xpY2tMaXN0ZW5lcigpOiB2b2lkO1xuICAgIHVuYmluZERvY3VtZW50Q2xpY2tMaXN0ZW5lcigpOiB2b2lkO1xuICAgIGJpbmREb2N1bWVudFJlc2l6ZUxpc3RlbmVyKCk6IHZvaWQ7XG4gICAgdW5iaW5kRG9jdW1lbnRSZXNpemVMaXN0ZW5lcigpOiB2b2lkO1xuICAgIGJpbmRTY3JvbGxMaXN0ZW5lcigpOiB2b2lkO1xuICAgIHVuYmluZFNjcm9sbExpc3RlbmVyKCk6IHZvaWQ7XG4gICAgb25PdmVybGF5SGlkZSgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTbGlkZU1lbnVNb2R1bGUge1xufVxuIl19
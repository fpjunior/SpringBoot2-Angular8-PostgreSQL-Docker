import { OnDestroy, EventEmitter, TemplateRef, AfterViewInit, AfterContentInit, QueryList, ElementRef, NgZone, ChangeDetectorRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Message } from 'primeng/api';
import { PrimeNGConfig } from 'primeng/api';
import { BlockableUI } from 'primeng/api';
import { HttpClient, HttpHeaders } from "@angular/common/http";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
import * as ɵngcc3 from 'primeng/button';
import * as ɵngcc4 from 'primeng/progressbar';
import * as ɵngcc5 from 'primeng/messages';
import * as ɵngcc6 from 'primeng/ripple';
export declare class FileUpload implements AfterViewInit, AfterContentInit, OnDestroy, BlockableUI {
    private el;
    sanitizer: DomSanitizer;
    zone: NgZone;
    private http;
    cd: ChangeDetectorRef;
    config: PrimeNGConfig;
    name: string;
    url: string;
    method: string;
    multiple: boolean;
    accept: string;
    disabled: boolean;
    auto: boolean;
    withCredentials: boolean;
    maxFileSize: number;
    invalidFileSizeMessageSummary: string;
    invalidFileSizeMessageDetail: string;
    invalidFileTypeMessageSummary: string;
    invalidFileTypeMessageDetail: string;
    invalidFileLimitMessageDetail: string;
    invalidFileLimitMessageSummary: string;
    style: any;
    styleClass: string;
    previewWidth: number;
    chooseLabel: string;
    uploadLabel: string;
    cancelLabel: string;
    chooseIcon: string;
    uploadIcon: string;
    cancelIcon: string;
    showUploadButton: boolean;
    showCancelButton: boolean;
    mode: string;
    headers: HttpHeaders;
    customUpload: boolean;
    fileLimit: number;
    onBeforeUpload: EventEmitter<any>;
    onSend: EventEmitter<any>;
    onUpload: EventEmitter<any>;
    onError: EventEmitter<any>;
    onClear: EventEmitter<any>;
    onRemove: EventEmitter<any>;
    onSelect: EventEmitter<any>;
    onProgress: EventEmitter<any>;
    uploadHandler: EventEmitter<any>;
    templates: QueryList<any>;
    advancedFileInput: ElementRef;
    basicFileInput: ElementRef;
    content: ElementRef;
    set files(files: File[]);
    get files(): File[];
    _files: File[];
    progress: number;
    dragHighlight: boolean;
    msgs: Message[];
    fileTemplate: TemplateRef<any>;
    contentTemplate: TemplateRef<any>;
    toolbarTemplate: TemplateRef<any>;
    uploadedFileCount: number;
    focus: boolean;
    uploading: boolean;
    duplicateIEEvent: boolean;
    constructor(el: ElementRef, sanitizer: DomSanitizer, zone: NgZone, http: HttpClient, cd: ChangeDetectorRef, config: PrimeNGConfig);
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    choose(): void;
    onFileSelect(event: any): void;
    isFileSelected(file: File): boolean;
    isIE11(): boolean;
    validate(file: File): boolean;
    private isFileTypeValid;
    getTypeClass(fileType: string): string;
    isWildcard(fileType: string): boolean;
    getFileExtension(file: File): string;
    isImage(file: File): boolean;
    onImageLoad(img: any): void;
    upload(): void;
    clear(): void;
    remove(event: Event, index: number): void;
    isFileLimitExceeded(): boolean;
    isChooseDisabled(): boolean;
    checkFileLimit(): void;
    clearInputElement(): void;
    clearIEInput(): void;
    hasFiles(): boolean;
    onDragEnter(e: any): void;
    onDragOver(e: any): void;
    onDragLeave(event: any): void;
    onDrop(event: any): void;
    onFocus(): void;
    onBlur(): void;
    formatSize(bytes: any): string;
    onBasicUploaderClick(): void;
    getBlockableElement(): HTMLElement;
    get chooseButtonLabel(): string;
    get uploadButtonLabel(): string;
    get cancelButtonLabel(): string;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FileUpload>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FileUpload, "p-fileUpload", never, {
    "method": "method";
    "invalidFileSizeMessageSummary": "invalidFileSizeMessageSummary";
    "invalidFileSizeMessageDetail": "invalidFileSizeMessageDetail";
    "invalidFileTypeMessageSummary": "invalidFileTypeMessageSummary";
    "invalidFileTypeMessageDetail": "invalidFileTypeMessageDetail";
    "invalidFileLimitMessageDetail": "invalidFileLimitMessageDetail";
    "invalidFileLimitMessageSummary": "invalidFileLimitMessageSummary";
    "previewWidth": "previewWidth";
    "chooseIcon": "chooseIcon";
    "uploadIcon": "uploadIcon";
    "cancelIcon": "cancelIcon";
    "showUploadButton": "showUploadButton";
    "showCancelButton": "showCancelButton";
    "mode": "mode";
    "files": "files";
    "name": "name";
    "url": "url";
    "multiple": "multiple";
    "accept": "accept";
    "disabled": "disabled";
    "auto": "auto";
    "withCredentials": "withCredentials";
    "maxFileSize": "maxFileSize";
    "style": "style";
    "styleClass": "styleClass";
    "chooseLabel": "chooseLabel";
    "uploadLabel": "uploadLabel";
    "cancelLabel": "cancelLabel";
    "headers": "headers";
    "customUpload": "customUpload";
    "fileLimit": "fileLimit";
}, {
    "onBeforeUpload": "onBeforeUpload";
    "onSend": "onSend";
    "onUpload": "onUpload";
    "onError": "onError";
    "onClear": "onClear";
    "onRemove": "onRemove";
    "onSelect": "onSelect";
    "onProgress": "onProgress";
    "uploadHandler": "uploadHandler";
}, ["templates"]>;
}
export declare class FileUploadModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<FileUploadModule, [typeof FileUpload], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.SharedModule, typeof ɵngcc3.ButtonModule, typeof ɵngcc4.ProgressBarModule, typeof ɵngcc5.MessagesModule, typeof ɵngcc6.RippleModule], [typeof FileUpload, typeof ɵngcc2.SharedModule, typeof ɵngcc3.ButtonModule, typeof ɵngcc4.ProgressBarModule, typeof ɵngcc5.MessagesModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<FileUploadModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXVwbG9hZC5kLnRzIiwic291cmNlcyI6WyJmaWxldXBsb2FkLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtR0E7Ozs7QUFFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uRGVzdHJveSwgRXZlbnRFbWl0dGVyLCBUZW1wbGF0ZVJlZiwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgUXVlcnlMaXN0LCBFbGVtZW50UmVmLCBOZ1pvbmUsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tICdwcmltZW5nL2FwaSc7XG5pbXBvcnQgeyBQcmltZU5HQ29uZmlnIH0gZnJvbSAncHJpbWVuZy9hcGknO1xuaW1wb3J0IHsgQmxvY2thYmxlVUkgfSBmcm9tICdwcmltZW5nL2FwaSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmlsZVVwbG9hZCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSwgQmxvY2thYmxlVUkge1xuICAgIHByaXZhdGUgZWw7XG4gICAgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXI7XG4gICAgem9uZTogTmdab25lO1xuICAgIHByaXZhdGUgaHR0cDtcbiAgICBjZDogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgY29uZmlnOiBQcmltZU5HQ29uZmlnO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB1cmw6IHN0cmluZztcbiAgICBtZXRob2Q6IHN0cmluZztcbiAgICBtdWx0aXBsZTogYm9vbGVhbjtcbiAgICBhY2NlcHQ6IHN0cmluZztcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBhdXRvOiBib29sZWFuO1xuICAgIHdpdGhDcmVkZW50aWFsczogYm9vbGVhbjtcbiAgICBtYXhGaWxlU2l6ZTogbnVtYmVyO1xuICAgIGludmFsaWRGaWxlU2l6ZU1lc3NhZ2VTdW1tYXJ5OiBzdHJpbmc7XG4gICAgaW52YWxpZEZpbGVTaXplTWVzc2FnZURldGFpbDogc3RyaW5nO1xuICAgIGludmFsaWRGaWxlVHlwZU1lc3NhZ2VTdW1tYXJ5OiBzdHJpbmc7XG4gICAgaW52YWxpZEZpbGVUeXBlTWVzc2FnZURldGFpbDogc3RyaW5nO1xuICAgIGludmFsaWRGaWxlTGltaXRNZXNzYWdlRGV0YWlsOiBzdHJpbmc7XG4gICAgaW52YWxpZEZpbGVMaW1pdE1lc3NhZ2VTdW1tYXJ5OiBzdHJpbmc7XG4gICAgc3R5bGU6IGFueTtcbiAgICBzdHlsZUNsYXNzOiBzdHJpbmc7XG4gICAgcHJldmlld1dpZHRoOiBudW1iZXI7XG4gICAgY2hvb3NlTGFiZWw6IHN0cmluZztcbiAgICB1cGxvYWRMYWJlbDogc3RyaW5nO1xuICAgIGNhbmNlbExhYmVsOiBzdHJpbmc7XG4gICAgY2hvb3NlSWNvbjogc3RyaW5nO1xuICAgIHVwbG9hZEljb246IHN0cmluZztcbiAgICBjYW5jZWxJY29uOiBzdHJpbmc7XG4gICAgc2hvd1VwbG9hZEJ1dHRvbjogYm9vbGVhbjtcbiAgICBzaG93Q2FuY2VsQnV0dG9uOiBib29sZWFuO1xuICAgIG1vZGU6IHN0cmluZztcbiAgICBoZWFkZXJzOiBIdHRwSGVhZGVycztcbiAgICBjdXN0b21VcGxvYWQ6IGJvb2xlYW47XG4gICAgZmlsZUxpbWl0OiBudW1iZXI7XG4gICAgb25CZWZvcmVVcGxvYWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uU2VuZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25VcGxvYWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uQ2xlYXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uUmVtb3ZlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblNlbGVjdDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25Qcm9ncmVzczogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgdXBsb2FkSGFuZGxlcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgdGVtcGxhdGVzOiBRdWVyeUxpc3Q8YW55PjtcbiAgICBhZHZhbmNlZEZpbGVJbnB1dDogRWxlbWVudFJlZjtcbiAgICBiYXNpY0ZpbGVJbnB1dDogRWxlbWVudFJlZjtcbiAgICBjb250ZW50OiBFbGVtZW50UmVmO1xuICAgIHNldCBmaWxlcyhmaWxlczogRmlsZVtdKTtcbiAgICBnZXQgZmlsZXMoKTogRmlsZVtdO1xuICAgIF9maWxlczogRmlsZVtdO1xuICAgIHByb2dyZXNzOiBudW1iZXI7XG4gICAgZHJhZ0hpZ2hsaWdodDogYm9vbGVhbjtcbiAgICBtc2dzOiBNZXNzYWdlW107XG4gICAgZmlsZVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGNvbnRlbnRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICB0b29sYmFyVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgdXBsb2FkZWRGaWxlQ291bnQ6IG51bWJlcjtcbiAgICBmb2N1czogYm9vbGVhbjtcbiAgICB1cGxvYWRpbmc6IGJvb2xlYW47XG4gICAgZHVwbGljYXRlSUVFdmVudDogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIHpvbmU6IE5nWm9uZSwgaHR0cDogSHR0cENsaWVudCwgY2Q6IENoYW5nZURldGVjdG9yUmVmLCBjb25maWc6IFByaW1lTkdDb25maWcpO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIGNob29zZSgpOiB2b2lkO1xuICAgIG9uRmlsZVNlbGVjdChldmVudDogYW55KTogdm9pZDtcbiAgICBpc0ZpbGVTZWxlY3RlZChmaWxlOiBGaWxlKTogYm9vbGVhbjtcbiAgICBpc0lFMTEoKTogYm9vbGVhbjtcbiAgICB2YWxpZGF0ZShmaWxlOiBGaWxlKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGlzRmlsZVR5cGVWYWxpZDtcbiAgICBnZXRUeXBlQ2xhc3MoZmlsZVR5cGU6IHN0cmluZyk6IHN0cmluZztcbiAgICBpc1dpbGRjYXJkKGZpbGVUeXBlOiBzdHJpbmcpOiBib29sZWFuO1xuICAgIGdldEZpbGVFeHRlbnNpb24oZmlsZTogRmlsZSk6IHN0cmluZztcbiAgICBpc0ltYWdlKGZpbGU6IEZpbGUpOiBib29sZWFuO1xuICAgIG9uSW1hZ2VMb2FkKGltZzogYW55KTogdm9pZDtcbiAgICB1cGxvYWQoKTogdm9pZDtcbiAgICBjbGVhcigpOiB2b2lkO1xuICAgIHJlbW92ZShldmVudDogRXZlbnQsIGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIGlzRmlsZUxpbWl0RXhjZWVkZWQoKTogYm9vbGVhbjtcbiAgICBpc0Nob29zZURpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgY2hlY2tGaWxlTGltaXQoKTogdm9pZDtcbiAgICBjbGVhcklucHV0RWxlbWVudCgpOiB2b2lkO1xuICAgIGNsZWFySUVJbnB1dCgpOiB2b2lkO1xuICAgIGhhc0ZpbGVzKCk6IGJvb2xlYW47XG4gICAgb25EcmFnRW50ZXIoZTogYW55KTogdm9pZDtcbiAgICBvbkRyYWdPdmVyKGU6IGFueSk6IHZvaWQ7XG4gICAgb25EcmFnTGVhdmUoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25Ecm9wKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uRm9jdXMoKTogdm9pZDtcbiAgICBvbkJsdXIoKTogdm9pZDtcbiAgICBmb3JtYXRTaXplKGJ5dGVzOiBhbnkpOiBzdHJpbmc7XG4gICAgb25CYXNpY1VwbG9hZGVyQ2xpY2soKTogdm9pZDtcbiAgICBnZXRCbG9ja2FibGVFbGVtZW50KCk6IEhUTUxFbGVtZW50O1xuICAgIGdldCBjaG9vc2VCdXR0b25MYWJlbCgpOiBzdHJpbmc7XG4gICAgZ2V0IHVwbG9hZEJ1dHRvbkxhYmVsKCk6IHN0cmluZztcbiAgICBnZXQgY2FuY2VsQnV0dG9uTGFiZWwoKTogc3RyaW5nO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGaWxlVXBsb2FkTW9kdWxlIHtcbn1cbiJdfQ==